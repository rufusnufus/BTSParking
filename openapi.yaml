openapi: '3.0.2'
info:
  title: BTS.Parking Client Interface API
  version: '1.2.0'

servers:
  - url: http://localhost:8000/api/v1
    description: Local API server for development.

paths:
  # Authorization

  /request-login-link:
    post:
      operationId: requestLoginLink
      summary: Generate a one-time link that will log a user in with their e-mail.
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: "user@example.com"
      responses:
        '204':
          description: A login link is sent to the e-mail successfully.
        '400':
          description: The provided e-mail is invalid.

  /get-login-code:
    post:
      operationId: getLoginCode
      summary: Temporary endpoint to bypass e-mail and just get a login code.
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: "user@example.com"
      responses:
        '200':
          description: A login code is returned successfully.
          content:
            application/json:
              schema:
                type: string
              example: 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
        '400':
          description: The provided e-mail is invalid.

  /activate-login-link:
    post:
      operationId: activateLoginLink
      summary: Perform authorization by a given one-time login code.
      tags:
        - Authorization
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  description: Constant value "None". Needed for compliance with OAuth2.
                  type: string
                password:
                  description: The login code to activate.
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Authorization token returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token_type:
                    type: string
                  access_token:
                    type: string
                required:
                  - access_token
        '404':
          description: The link doesn't exist or isn't valid anymore.

  /logout:
    post:
      operationId: logOut
      summary: Terminate a user's session.
      tags:
        - Authorization
      responses:
        '204':
          description: Session terminated successfully.

  # Booking

  /map:
    get:
      operationId: getGlobalMap
      summary: Get the properties and objects of the global map of the parking lot.
      security:
        - bearerAuth: []
      tags:
        - Booking
      responses:
        '200':
          description: A global map of the parking lot is returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLotMapDefinition'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /zones/{zone_id}/full-map:
    get:
      operationId: getFullZoneMap
      summary: Get the objects of the zone map and the information on occupants.
      tags:
        - Booking
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A map of the zone with occupants is returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneMapDefinition'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: A non-admin user attempted to access this endpoint.
        '404':
          $ref: '#/components/responses/ZoneDoesNotExist'

  /zones/{zone_id}/map:
    get:
      operationId: getZoneMap
      summary: Get the objects of the zone map and information on own cars.
      tags:
        - Booking
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A map of the zone with user's own cars is returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneMapDefinition'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/ZoneDoesNotExist'

  /zones/{zone_id}/book:
    post:
      operationId: bookSpace
      summary: Book a parking space.
      tags:
        - Booking
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '204':
          description: Space booked successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/ZoneDoesNotExist'

  # Car Management

  /cars:
    get:
      operationId: listCars
      summary: List the saved cars.
      tags:
        - Car Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listing of all added cars of a user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      operationId: createCar
      summary: Create a new car.
      tags:
        - Car Management
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
            example:
              model: Volkswagen Touareg
              license_number: A000AA
      responses:
        '200':
          description: Car created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Car/properties/id'
                required:
                  - id
        '401':
          $ref: '#/components/responses/Unauthorized'

  /cars/{car_id}:
    delete:
      operationId: deleteCar
      summary: Delete a saved car.
      tags:
        - Car Management
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Car deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: This car isn't owned by this user.
        '404':
          description: This car doesn't exist.

components:
  responses:
    Unauthorized:
      description: The request is not authorized.
    ZoneDoesNotExist:
      description: This zone doesn't exist.

  schemas:
    Point:
      type: object
      properties:
        'x':
          type: integer
        'y':
          type: integer
      required:
        - 'x'
        - 'y'
      example:
        'x': 150
        'y': 0

    Rectangle:
      type: object
      required:
        - start
        - end
      properties:
        start:
          $ref: '#/compnoents/schemas/Point'
        end:
          $ref: '#/compnoents/schemas/Point'
      example:
        start:
          x: 0
          y: 10
        end:
          x: 150
          y: 60

    Zone:
      allOf:
        - $ref: '#/components/schemas/Rectangle'
        - type: object
          required:
            - type
            - id
            - name
            - free_spaces
            - hourly_rate
          properties:
            type:
              type: string
            id:
              type: integer
            name:
              type: string
            free_spaces:
              type: integer
            own_booked_spaces:
              type: integer
            hourly_rate:
              type: number
      example:
        type: zone
        id: 1
        name: A
        free_spaces: 15
        own_booked_spaces: 0
        hourly_rate: 15.0
        start:
          x: 10
          y: 10
        end:
          x: 30
          y: 50

    Road:
      allOf:
        - $ref: '#/components/schemas/Rectangle'
        - type: object
          required:
            - type
          properties:
            type:
              type: string

    Divider:
      allOf:
        - $ref: '#/components/schemas/Rectangle'
        - type: object
          required:
            - type
          properties:
            type:
              type: string

    Gate:
      allOf:
        - $ref: '#/components/schemas/Rectangle'
        - type: object
          required:
            - type
            - name
          properties:
            type:
              type: string
            name:
              type: string

    Space:
      allOf:
        - $ref: '#/components/schemas/Rectangle'
        - type: object
          required:
            - type
            - id
            - free
          properties:
            type:
              type: string
            id:
              type: integer
            free:
              type: boolean
            booking:
              $ref: '#/components/schemas/Booking'

    ParkingLotMapDefinition:
      type: object
      required:
        - width
        - height
        - objects
      properties:
        width:
          type: integer
        height:
          type: integer
        objects:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Zone'
              - $ref: '#/components/schemas/Road'
              - $ref: '#/components/schemas/Divider'
              - $ref: '#/components/schemas/Gate'
            discriminator:
              propertyName: type
              mapping:
                zone: '#/components/schemas/Zone'
                road: '#/components/schemas/Road'
                divider: '#/components/schemas/Divider'
                gate: '#/components/schemas/Gate'

    ZoneMapDefinition:
      type: object
      required:
        - width
        - height
        - objects
      properties:
        width:
          type: integer
        height:
          type: integer
        objects:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Space'
              - $ref: '#/components/schemas/Road'
            discriminator:
              propertyName: type
              mapping:
                space: '#/components/schemas/Space'
                road: '#/components/schemas/Road'

    Booking:
      type: object
      required:
        - occupying_car
        - space_id
        - booked_from
        - booked_until
      properties:
        occupying_car:
          $ref: '#/components/schemas/Car'
        space_id:
          type: integer
        booked_from:
          type: string
        booked_until:
          type: string
      example:
        occupying_car:
          id: 1
          model: Volkswagen Touareg
          license_number: A000AA
        space_id: 3
        booked_from: '2021-11-01T18:00Z'
        booked_until: '2021-11-01T20:00Z'

    User:
      type: object
      properties:
        email:
          type: string
        is_admin:
          type: boolean
          readOnly: true
      required:
        - email
      example:
        email: "user@example.com"
        is_admin: false

    Car:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        model:
          type: string
        license_number:
          type: string
      required:
        - id
        - model
        - license_number
      example:
        id: 1
        model: Volkswagen Touareg
        license_number: A000AA

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
